package com.mogproject.mogami.core.attack

import org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks
import org.scalatest.flatspec.AnyFlatSpec
import org.scalatest.matchers.must.Matchers

import com.mogproject.mogami._
import com.mogproject.mogami.core.PieceConstant._
import com.mogproject.mogami.core.SquareConstant._

class AttackSpec extends AnyFlatSpec with Matchers with ScalaCheckDrivenPropertyChecks {
  "Attack#get" must "work with drop attacks" in {
    val allOcc = BitBoard.seq(
      """
        |********* ********* *-------- --------- *-------- --------- -------*- *-------*
        |-*-----*- --------- -*------- --------- -*-----*- --------- ----**--- ----*----
        |--------- --*------ ********* --------- --*------ ------*-- ----**--- ---*-----
        |--------- ------*-- ---*----- --------- ---**---- --------- --------- -----*---
        |--------- -----*--- ----*---- ----*---- ----**--- ---*----- --**----- ---------
        |------*-- --*------ -----*--- --------- ----*-*-- *-*-**--- --------* --*---*--
        |--------- -----*--- ------*-- --------- -------*- -*------- *-------- ---***---
        |-*-----*- --------- -------*- ********* --------* --------- --------- ---***---
        |********* --------- --------* --------- --------- --------- ----*--*- ---------
      """.stripMargin
    )
    val pawnOcc = BitBoard.seq(
      """
        |--------- ********* --------- --------- *-------- --------- --------- *-------*
        |--------- --------- --------- --------- -*------- --------- --------- ----*----
        |--------- --------- ********* --------- --*------ --------- --------- ---------
        |--------- --------- --------- --------- ---*----- --------- --------- ---------
        |--------- --------- --------- --------- -----*--- --------- --**----- ---------
        |--------- --------- --------- --------- ------*-- *---**--- --------* --*---*--
        |--------- --------- --------- --------- -------*- -*------- *-------- ---------
        |--------- --------- --------- ********* --------* --------- --------- ---------
        |--------- --------- --------- --------- --------- --------- --------- ---------
      """.stripMargin
    )
    val expected = BitBoard.seq(
      """
        |--------- --------- --------- --------- --------- --------- --------- ---------
        |*-*****-* --------- --------- --------- ----*---- --**--*** -*----**- -*-*-*-*-
        |********* --------- --------- --------- ----*---- --**---** -*----**- -*---*-*-
        |********* --------- --------- --------- --------- --**--*** -*--****- -*-*---*-
        |********* --------- --------- --------- --------- --*---*** -*--****- -*-*-*-*-
        |******-** --------- --------- --------- --------- ---*--*** -*--****- -*-*-*-*-
        |********* --------- --------- --------- ----*---- --**--*** -*--****- -*-----*-
        |*-*****-* --------- --------- --------- ----*---- --**--*** -*--****- -*-----*-
        |--------- --------- --------- --------- ----*---- --**--*** -*---**-- -*-*-*-*-
      """.stripMargin)

    val occs = Seq(allOcc, pawnOcc).transpose
    occs.length must be(expected.length)
    occs zip expected foreach {
      case (aa :: b :: Nil, x) => (aa, Attack.get(BP, None, aa, b)) must be((aa, x))
      case _ =>
    }
  }
  it must "work with direct attacks" in {
    val poses = Seq(P55, P11, P27, P99, P33, P44, P83, P94, P39, P51)
    val pieces = Seq(BP, WP, WN, BS, WG, BK, WPP, BPL, BS, WK)
    val allOcc = BitBoard.seq(
      """
        |********* ********* *-------- --------- *------*- --------- -------*- *-------* ********* *********
        |-*-----*- --------- -*------- --------- -*----**- --------- ***-**--- ----*---- -*-----*- -*-----*-
        |----*---- --*------ ********* --------- --*--*--- ------*-- ***-**--- -*-*----- ********* *********
        |--------- ------*-- ---*----- --------- ---**---- --------- ***------ -*---*--- --------- ---------
        |--------- -----*--- ----*---- ----*---- ----**--- ---*----- --**----- --------- --------- ---------
        |------*-- --*------ -----*--- --------- ----*-*-- *-*-**--- --------* --*---*-- --------- ---------
        |--------- -----*--- ------*-- --------- -------*- -*------- *-------- ---***--- ********* *********
        |-*-----*- --------- -------*- ********* --------* --------- --------- ---***--- -*-----*- -*-----*-
        |********* --------- --------* --------- --------- --------- ----*--*- --------- ********* *********
      """.stripMargin
    )
    val pawnOcc = BitBoard.seq(
      """
        |--------- ********* --------- --------- *-------- --------- --------- *-------* --------- ---------
        |--------- --------- --------- --------- -*------- --------- --------- ----*---- --------- ---------
        |--------- --------- ********* --------- --*------ --------- --------- --------- --------- *********
        |--------- --------- --------- --------- ---*----- --------- --------- --------- --------- ---------
        |--------- --------- --------- --------- -----*--- --------- --**----- --------- --------- ---------
        |--------- --------- --------- --------- ------*-- *---**--- --------* --*---*-- --------- ---------
        |--------- --------- --------- --------- -------*- -*------- *-------- --------- ********* ---------
        |--------- --------- --------- ********* --------* --------- --------- --------- --------- ---------
        |--------- --------- --------- --------- --------- --------- --------- --------- --------- ---------
      """.stripMargin
    )
    val expected = BitBoard.seq(
      """
        |--------- --------- --------- --------- --------- --------- --------- --------- --------- ---*-*---
        |--------- --------* --------- --------- ------*-- --------- -*------- --------- --------- ---***---
        |--------- --------- --------- --------- -----*-*- ----***-- *-*------ **------- --------- ---------
        |----*---- --------- --------- --------- -----***- ----*-*-- ***------ -*------- --------- ---------
        |--------- --------- --------- --------- --------- ----***-- --------- *-------- --------- ---------
        |--------- --------- --------- --------- --------- --------- --------- --------- --------- ---------
        |--------- --------- --------- --------- --------- --------- --------- --------- --------- ---------
        |--------- --------- --------- **------- --------- --------- --------- --------- -----***- ---------
        |--------- --------- ------*-* --------- --------- --------- --------- --------- --------- ---------
      """.stripMargin)

    val params = Seq(poses, pieces, allOcc, pawnOcc).transpose
    params.length must be(expected.length)
    params zip expected foreach {
      case (pos :: piece :: aa :: b :: Nil, x) =>
        (aa, Attack.get(piece.asInstanceOf[Piece], Some(pos.asInstanceOf[Square]), aa.asInstanceOf[BitBoard], b.asInstanceOf[BitBoard])) must be((aa, x))
      case _ =>
    }
  }
  it must "work with ranged attacks" in {
    val poses = Seq(P55, P11, P27, P99, P33, P44, P83, P94, P19, P82)
    val pieces = Seq(BL, WL, BB, WB, BR, WR, BPB, WPR, BL, WR)
    val allOcc = BitBoard.seq(
      """
        |********* ********* *-------- --------- *------*- --------- -------*- *-------* ********* *********
        |-*-----*- --------- -*------- --------- -*----**- --------- ***-**--- ----*---- -*-----*- -*-----*-
        |----*---- --*------ ********* --------- --*--*--- ------*-- ***-**--- -*-*----- ********* *********
        |--------- ------*-- ---*----- --------- ---**---- --------* **------- -*---*--- --------- ---------
        |--------- -----*--- ----*---- ----*---- ----**--- ---*----- --**----- --------- --------- ---------
        |------*-- --*------ -----*--- --------- ----*-*-- *-*-**--- --------* --*---*-- --------- ---------
        |--------- -----*--- ------*-- --------- -------*- -*------- *-------- ---***--- ********* *********
        |-*-----*- --------- -------*- *-******* --------* --------- --------- ---***--- -*-----*- -*-----*-
        |********* --------- --------* --------- --------- --------- ----*--*- --------- ********* *********
      """.stripMargin
    )
    val pawnOcc = BitBoard.seq(
      """
        |--------- ********* --------- --------- *-------- --------- --------- *-------* --------- ---------
        |--------- --------- --------- --------- -*------- --------- --------- ----*---- --------- ---------
        |--------- --------- ********* --------- --*------ --------- --------- --------- --------- *********
        |--------- --------- --------- --------- ---*----- --------- --------- --------- --------- ---------
        |--------- --------- --------- --------- -----*--- --------- --**----- --------- --------- ---------
        |--------- --------- --------- --------- ------*-- *---*---- --------* --*---*-- --------- ---------
        |--------- --------- --------- --------- -------*- -*------- *-------- --------- ********* ---------
        |--------- --------- --------- *-******* --------* --------- --------- --------- --------- ---------
        |--------- --------- --------- --------- --------- --------- --------- --------- --------- ---------
      """.stripMargin
    )
    val expected = BitBoard.seq(
      """
        |--------- --------- --------- --------- --------- -----*--- --------- *-------- --------- -*-------
        |--------- --------* --------- --------- ------*-- -----*--- ***------ *-------- --------- *-******-
        |----*---- --------* ---*----- --------- -----*-** -----*--- *-*------ **------- --------- -*-------
        |----*---- --------* ----*---- --------- ------*-- *****-*** ***------ -*------- --------- ---------
        |--------- --------* -----*--- ----*---- ------*-- -----*--- ---*----- **------- --------- ---------
        |--------- --------* ------*-* ---*----- ------*-- -----*--- --------- *-------- --------- ---------
        |--------- --------* --------- --*------ --------- --------- --------- *-------- --------* ---------
        |--------- --------* ------*-* -*------- --------- --------- --------- *-------- --------* ---------
        |--------- --------* -----*--- --------- --------- --------- --------- *-------- --------- ---------
      """.stripMargin)

    val params = Seq(poses, pieces, allOcc, pawnOcc).transpose
    params.length must be(expected.length)
    params zip expected foreach {
      case (pos :: piece :: aa :: b :: Nil, x) =>
        (aa, Attack.get(piece.asInstanceOf[Piece], Some(pos.asInstanceOf[Square]), aa.asInstanceOf[BitBoard], b.asInstanceOf[BitBoard])) must be((aa, x))
      case _ =>
    }
  }

}
