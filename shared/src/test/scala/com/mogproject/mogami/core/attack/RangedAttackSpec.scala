package com.mogproject.mogami.core.attack

import org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks
import org.scalatest.flatspec.AnyFlatSpec
import org.scalatest.matchers.must.Matchers

import com.mogproject.mogami._
import com.mogproject.mogami.core.PieceConstant._
import com.mogproject.mogami.core.SquareConstant._


class RangedAttackSpec extends AnyFlatSpec with Matchers with ScalaCheckDrivenPropertyChecks  {
  object TestRangedAttack extends RangedAttack
  
  "RangedAttack#getRangedAttack" must "work for black lance with empty occupancy" in {
    val expected = BitBoard.seq(
      """
        |--------- --------* -------*- --------* ----*---- *-------- --*------
        |--------- --------- --------- --------* ----*---- *-------- --*------
        |--------- --------- --------- --------* ----*---- *-------- --*------
        |--------- --------- --------- --------* ----*---- *-------- --*------
        |--------- --------- --------- --------* --------- *-------- --*------
        |--------- --------- --------- --------* --------- *-------- --*------
        |--------- --------- --------- --------* --------- *-------- ---------
        |--------- --------- --------- --------* --------- *-------- ---------
        |--------- --------- --------- --------- --------- --------- ---------
      """.stripMargin)
    Seq(P51, P12, P22, P19, P55, P99, P77) zip expected foreach {
      case (x, y) => (x, TestRangedAttack.getRangedAttack(BL, x, BitBoard.empty)) mustBe (x, y)
    }
  }
  it must "work for black lance with full occupancy" in {
    val expected = BitBoard.seq(
      """
        |--------- --------* -------*- --------- --------- --------- ---------
        |--------- --------- --------- --------- --------- --------- ---------
        |--------- --------- --------- --------- --------- --------- ---------
        |--------- --------- --------- --------- ----*---- --------- ---------
        |--------- --------- --------- --------- --------- --------- ---------
        |--------- --------- --------- --------- --------- --------- --*------
        |--------- --------- --------- --------- --------- --------- ---------
        |--------- --------- --------- --------* --------- *-------- ---------
        |--------- --------- --------- --------- --------- --------- ---------
      """.stripMargin)
    Seq(P51, P12, P22, P19, P55, P99, P77) zip expected foreach {
      case (x, y) => (x, TestRangedAttack.getRangedAttack(BL, x, BitBoard.full)) mustBe (x, y)
    }
  }
  it must "work for black lance with random occupancy" in {
    val expected = BitBoard.seq(
      """
        |--------- --------* -------*- --------- --------- --------- ---------
        |--------- --------- --------- --------* --------- --------- --*------
        |--------- --------- --------- --------* ----*---- --------- --*------
        |--------- --------- --------- --------* ----*---- --------- --*------
        |--------- --------- --------- --------* --------- *-------- --*------
        |--------- --------- --------- --------* --------- *-------- --*------
        |--------- --------- --------- --------* --------- *-------- ---------
        |--------- --------- --------- --------* --------- *-------- ---------
        |--------- --------- --------- --------- --------- --------- ---------
      """.stripMargin)
    Seq(P51, P12, P22, P19, P55, P99, P77) zip expected foreach {
      case (x, y) => (x, TestRangedAttack.getRangedAttack(BL, x, BitBoard(
        """
          |--*-*---*
          |--*-----*
          |----*----
          |*--------
          |*---*----
          |----*----
          |----*----
          |----*----
          |----*---*
        """.stripMargin))) mustBe (x, y)
    }
  }
  it must "work for white lance with empty occupancy" in {
    val expected = BitBoard.seq(
      """
        |--------- --------- --------- --------- --------- --------- ---------
        |--------- --------- --------- --------* --------- *-------- ---------
        |--------- --------- --------- --------* --------- *-------- ---------
        |--------- --------- --------- --------* --------- *-------- --*------
        |--------- --------- --------- --------* --------- *-------- --*------
        |--------- --------- --------- --------* ----*---- *-------- --*------
        |--------- --------- --------- --------* ----*---- *-------- --*------
        |--------- --------- --------- --------* ----*---- *-------- --*------
        |--------- --------* -------*- --------* ----*---- *-------- --*------
      """.stripMargin)
    Seq(P59, P18, P28, P11, P55, P91, P73) zip expected foreach {
      case (x, y) => (x, TestRangedAttack.getRangedAttack(WL, x, BitBoard.empty)) mustBe (x, y)
    }
  }
  it must "work for white lance with full occupancy" in {
    val expected = BitBoard.seq(
      """
        |--------- --------* -------*- --------- --------- --------- ---------
        |--------- --------- --------- --------- --------- --------- ---------
        |--------- --------- --------- --------- --------- --------- ---------
        |--------- --------- --------- --------- ----*---- --------- ---------
        |--------- --------- --------- --------- --------- --------- ---------
        |--------- --------- --------- --------- --------- --------- --*------
        |--------- --------- --------- --------- --------- --------- ---------
        |--------- --------- --------- --------* --------- *-------- ---------
        |--------- --------- --------- --------- --------- --------- ---------
      """.stripMargin)
    Seq(P51, P12, P22, P19, P55, P99, P77) zip expected foreach {
      case (x, y) => (x, TestRangedAttack.getRangedAttack(BL, x, BitBoard.full)) mustBe (x, y)
    }
  }
  it must "work for white lance with random occupancy" in {
    val expected = BitBoard.seq(
      """
        |--------- --------* -------*- --------- --------- --------- ---------
        |--------- --------- --------- --------* --------- --------- --*------
        |--------- --------- --------- --------* ----*---- --------- --*------
        |--------- --------- --------- --------* ----*---- --------- --*------
        |--------- --------- --------- --------* --------- *-------- --*------
        |--------- --------- --------- --------* --------- *-------- --*------
        |--------- --------- --------- --------* --------- *-------- ---------
        |--------- --------- --------- --------* --------- *-------- ---------
        |--------- --------- --------- --------- --------- --------- ---------
      """.stripMargin)
    Seq(P51, P12, P22, P19, P55, P99, P77) zip expected foreach {
      case (x, y) => (x, TestRangedAttack.getRangedAttack(BL, x, BitBoard(
        """
          |--*-*---*
          |--*-----*
          |----*----
          |*--------
          |*---*----
          |----*----
          |----*----
          |----*----
          |----*---*
        """.stripMargin))) mustBe (x, y)
    }
  }
  it must "work for bishop with empty occupancy" in {
    val expected = BitBoard.seq(
      """
        |--------- -------*- ------*-* *-------- *-------* --------* --------*
        |---*-*--- --------- --------- -*------- -*-----*- -------*- -------*-
        |--*---*-- -------*- ------*-* --*------ --*---*-- ------*-- ------*--
        |-*-----*- ------*-- -----*--- ---*----- ---*-*--- -----*--- -----*---
        |*-------* -----*--- ----*---- ----*---- --------- ----*---- *---*----
        |--------- ----*---- ---*----- -----*--- ---*-*--- ---*----- -*-*-----
        |--------- ---*----- --*------ ------*-- --*---*-- --*------ ---------
        |--------- --*------ -*------- -------*- -*-----*- -*------- -*-*-----
        |--------- -*------- *-------- --------- *-------* --------- *---*----
      """.stripMargin)
    Seq(P51, P12, P22, P19, P55, P99, P77) zip expected foreach {
      case (x, y) => (x, TestRangedAttack.getRangedAttack(BB, x, BitBoard.empty)) mustBe (x, y)
    }
    Seq(P51, P12, P22, P19, P55, P99, P77) zip expected foreach {
      case (x, y) => (x, TestRangedAttack.getRangedAttack(WB, x, BitBoard.empty)) mustBe (x, y)
    }
  }
  it must "work for bishop with full occupancy" in {
    val expected = BitBoard.seq(
      """
        |--------- -------*- ------*-* --------- --------- --------- ---------
        |---*-*--- --------- --------- --------- --------- --------- ---------
        |--------- -------*- ------*-* --------- --------- --------- ---------
        |--------- --------- --------- --------- ---*-*--- --------- ---------
        |--------- --------- --------- --------- --------- --------- ---------
        |--------- --------- --------- --------- ---*-*--- --------- -*-*-----
        |--------- --------- --------- --------- --------- --------- ---------
        |--------- --------- --------- -------*- --------- -*------- -*-*-----
        |--------- --------- --------- --------- --------- --------- ---------
      """.stripMargin)
    Seq(P51, P12, P22, P19, P55, P99, P77) zip expected foreach {
      case (x, y) => (x, TestRangedAttack.getRangedAttack(BB, x, BitBoard.full)) mustBe (x, y)
    }
    Seq(P51, P12, P22, P19, P55, P99, P77) zip expected foreach {
      case (x, y) => (x, TestRangedAttack.getRangedAttack(WB, x, BitBoard.full)) mustBe (x, y)
    }
  }
  it must "work for bishop with random occupancy" in {
    val expected = BitBoard.seq(
      """
        |--------- -------*- ------*-* --------- --------* --------- --------*
        |---*-*--- --------- --------- --------- -------*- --------- -------*-
        |--*---*-- -------*- ------*-* --*------ --*---*-- --------- ------*--
        |-------*- ------*-- -----*--- ---*----- ---*-*--- --------- -----*---
        |--------- -----*--- ----*---- ----*---- --------- --------- *---*----
        |--------- ----*---- ---*----- -----*--- ---*-*--- --------- -*-*-----
        |--------- ---*----- --*------ ------*-- --*---*-- --*------ ---------
        |--------- --*------ --------- -------*- -------*- -*------- -*-*-----
        |--------- --------- --------- --------- --------* --------- *--------
      """.stripMargin)
    val occ = BitBoard(
      """
        |----*----
        |---------
        |--*------
        |-*-----*-
        |*--------
        |*--------
        |--*------
        |--**-----
        |---------
      """.stripMargin)
    Seq(P51, P12, P22, P19, P55, P99, P77) zip expected foreach {
      case (x, y) => (x, TestRangedAttack.getRangedAttack(BB, x, occ)) mustBe (x, y)
    }
    Seq(P51, P12, P22, P19, P55, P99, P77) zip expected foreach {
      case (x, y) => (x, TestRangedAttack.getRangedAttack(WB, x, occ)) mustBe (x, y)
    }
  }
  it must "work for pro-bishop with empty occupancy" in {
    val expected = BitBoard.seq(
      """
        |---*-*--- -------** ------*** *-------- *-------* --------* --------*
        |---***--- -------*- ------*-* -*------- -*-----*- -------*- -------*-
        |--*---*-- -------** ------*** --*------ --*---*-- ------*-- ------*--
        |-*-----*- ------*-- -----*--- ---*----- ---***--- -----*--- -----*---
        |*-------* -----*--- ----*---- ----*---- ---*-*--- ----*---- *---*----
        |--------- ----*---- ---*----- -----*--- ---***--- ---*----- -***-----
        |--------- ---*----- --*------ ------*-- --*---*-- --*------ -*-*-----
        |--------- --*------ -*------- -------** -*-----*- **------- -***-----
        |--------- -*------- *-------- -------*- *-------* -*------- *---*----
      """.stripMargin)
    Seq(P51, P12, P22, P19, P55, P99, P77) zip expected foreach {
      case (x, y) => (x, TestRangedAttack.getRangedAttack(BPB, x, BitBoard.empty)) mustBe (x, y)
    }
    Seq(P51, P12, P22, P19, P55, P99, P77) zip expected foreach {
      case (x, y) => (x, TestRangedAttack.getRangedAttack(WPB, x, BitBoard.empty)) mustBe (x, y)
    }
  }
  it must "work for pro-bishop with full occupancy" in {
    val expected = BitBoard.seq(
      """
        |---*-*--- -------** ------*** --------- --------- --------- ---------
        |---***--- -------*- ------*-* --------- --------- --------- ---------
        |--------- -------** ------*** --------- --------- --------- ---------
        |--------- --------- --------- --------- ---***--- --------- ---------
        |--------- --------- --------- --------- ---*-*--- --------- ---------
        |--------- --------- --------- --------- ---***--- --------- -***-----
        |--------- --------- --------- --------- --------- --------- -*-*-----
        |--------- --------- --------- -------** --------- **------- -***-----
        |--------- --------- --------- -------*- --------- -*------- ---------
      """.stripMargin)
    Seq(P51, P12, P22, P19, P55, P99, P77) zip expected foreach {
      case (x, y) => (x, TestRangedAttack.getRangedAttack(BPB, x, BitBoard.full)) mustBe (x, y)
    }
    Seq(P51, P12, P22, P19, P55, P99, P77) zip expected foreach {
      case (x, y) => (x, TestRangedAttack.getRangedAttack(WPB, x, BitBoard.full)) mustBe (x, y)
    }
  }
  it must "work for pro-bishop with random occupancy" in {
    val expected = BitBoard.seq(
      """
        |---*-*--- -------** ------*** --------- --------* --------- --------*
        |---***--- -------*- ------*-* --------- -------*- --------- -------*-
        |--*---*-- -------** ------*** --*------ --*---*-- --------- ------*--
        |-------*- ------*-- -----*--- ---*----- ---***--- --------- -----*---
        |--------- -----*--- ----*---- ----*---- ---*-*--- --------- *---*----
        |--------- ----*---- ---*----- -----*--- ---***--- --------- -***-----
        |--------- ---*----- --*------ ------*-- --*---*-- --*------ -*-*-----
        |--------- --*------ --------- -------** -------*- **------- -***-----
        |--------- --------- --------- -------*- --------* -*------- *--------
      """.stripMargin)
    val occ = BitBoard(
      """
        |----*---*
        |--------*
        |--*------
        |-*-----**
        |*--------
        |*--------
        |--*-----*
        |--**-----
        |---------
      """.stripMargin)
    Seq(P51, P12, P22, P19, P55, P99, P77) zip expected foreach {
      case (x, y) => (x, TestRangedAttack.getRangedAttack(BPB, x, occ)) mustBe (x, y)
    }
    Seq(P51, P12, P22, P19, P55, P99, P77) zip expected foreach {
      case (x, y) => (x, TestRangedAttack.getRangedAttack(WPB, x, occ)) mustBe (x, y)
    }
  }
  it must "work for rook with empty occupancy" in {
    val expected = BitBoard.seq(
      """
        |****-**** --------* -------*- --------* ----*---- *-------- --*------
        |----*---- ********- *******-* --------* ----*---- *-------- --*------
        |----*---- --------* -------*- --------* ----*---- *-------- --*------
        |----*---- --------* -------*- --------* ----*---- *-------- --*------
        |----*---- --------* -------*- --------* ****-**** *-------- --*------
        |----*---- --------* -------*- --------* ----*---- *-------- --*------
        |----*---- --------* -------*- --------* ----*---- *-------- **-******
        |----*---- --------* -------*- --------* ----*---- *-------- --*------
        |----*---- --------* -------*- ********- ----*---- -******** --*------
      """.stripMargin)
    Seq(P51, P12, P22, P19, P55, P99, P77) zip expected foreach {
      case (x, y) => (x, TestRangedAttack.getRangedAttack(BR, x, BitBoard.empty)) mustBe (x, y)
    }
    Seq(P51, P12, P22, P19, P55, P99, P77) zip expected foreach {
      case (x, y) => (x, TestRangedAttack.getRangedAttack(WR, x, BitBoard.empty)) mustBe (x, y)
    }
  }
  it must "work for rook with full occupancy" in {
    val expected = BitBoard.seq(
      """
        |---*-*--- --------* -------*- --------- --------- --------- ---------
        |----*---- -------*- ------*-* --------- --------- --------- ---------
        |--------- --------* -------*- --------- --------- --------- ---------
        |--------- --------- --------- --------- ----*---- --------- ---------
        |--------- --------- --------- --------- ---*-*--- --------- ---------
        |--------- --------- --------- --------- ----*---- --------- --*------
        |--------- --------- --------- --------- --------- --------- -*-*-----
        |--------- --------- --------- --------* --------- *-------- --*------
        |--------- --------- --------- -------*- --------- -*------- ---------
      """.stripMargin)
    Seq(P51, P12, P22, P19, P55, P99, P77) zip expected foreach {
      case (x, y) => (x, TestRangedAttack.getRangedAttack(BR, x, BitBoard.full)) mustBe (x, y)
    }
    Seq(P51, P12, P22, P19, P55, P99, P77) zip expected foreach {
      case (x, y) => (x, TestRangedAttack.getRangedAttack(WR, x, BitBoard.full)) mustBe (x, y)
    }
  }
  it must "work for rook with random occupancy" in {
    val expected = BitBoard.seq(
      """
        |--**-**** --------* -------*- --------- --------- --------- ---------
        |----*---- --******- --*****-* --------- --------- --------- ---------
        |----*---- --------* -------*- --------- --------- --------- ---------
        |----*---- --------* -------*- --------- ----*---- --------- ---------
        |--------- --------* --------- --------- --**-**** --------- --*------
        |--------- --------* --------- --------- ----*---- *-------- --*------
        |--------- --------* --------- --------- ----*---- *-------- **-******
        |--------- --------* --------- --------* ----*---- *-------- --*------
        |--------- --------- --------- --******- --------- -**------ ---------
      """.stripMargin)
    val occ = BitBoard(
      """
        |--*-*----
        |--*------
        |--*------
        |-*--*--*-
        |*-*------
        |*--------
        |--*------
        |--***---*
        |--*------
      """.stripMargin)
    Seq(P51, P12, P22, P19, P55, P99, P77) zip expected foreach {
      case (x, y) => (x, TestRangedAttack.getRangedAttack(BR, x, occ)) mustBe (x, y)
    }
    Seq(P51, P12, P22, P19, P55, P99, P77) zip expected foreach {
      case (x, y) => (x, TestRangedAttack.getRangedAttack(WR, x, occ)) mustBe (x, y)
    }
  }
  it must "work for pro-rook with empty occupancy" in {
    val expected = BitBoard.seq(
      """
        |****-**** -------** ------*** --------* ----*---- *-------- --*------
        |---***--- ********- *******-* --------* ----*---- *-------- --*------
        |----*---- -------** ------*** --------* ----*---- *-------- --*------
        |----*---- --------* -------*- --------* ---***--- *-------- --*------
        |----*---- --------* -------*- --------* ****-**** *-------- --*------
        |----*---- --------* -------*- --------* ---***--- *-------- -***-----
        |----*---- --------* -------*- --------* ----*---- *-------- **-******
        |----*---- --------* -------*- -------** ----*---- **------- -***-----
        |----*---- --------* -------*- ********- ----*---- -******** --*------
      """.stripMargin)
    Seq(P51, P12, P22, P19, P55, P99, P77) zip expected foreach {
      case (x, y) => (x, TestRangedAttack.getRangedAttack(BPR, x, BitBoard.empty)) mustBe (x, y)
    }
    Seq(P51, P12, P22, P19, P55, P99, P77) zip expected foreach {
      case (x, y) => (x, TestRangedAttack.getRangedAttack(WPR, x, BitBoard.empty)) mustBe (x, y)
    }
  }
  it must "work for pro-rook with full occupancy" in {
    val expected = BitBoard.seq(
      """
        |---*-*--- -------** ------*** --------- --------- --------- ---------
        |---***--- -------*- ------*-* --------- --------- --------- ---------
        |--------- -------** ------*** --------- --------- --------- ---------
        |--------- --------- --------- --------- ---***--- --------- ---------
        |--------- --------- --------- --------- ---*-*--- --------- ---------
        |--------- --------- --------- --------- ---***--- --------- -***-----
        |--------- --------- --------- --------- --------- --------- -*-*-----
        |--------- --------- --------- -------** --------- **------- -***-----
        |--------- --------- --------- -------*- --------- -*------- ---------
      """.stripMargin)
    Seq(P51, P12, P22, P19, P55, P99, P77) zip expected foreach {
      case (x, y) => (x, TestRangedAttack.getRangedAttack(BPR, x, BitBoard.full)) mustBe (x, y)
    }
    Seq(P51, P12, P22, P19, P55, P99, P77) zip expected foreach {
      case (x, y) => (x, TestRangedAttack.getRangedAttack(WPR, x, BitBoard.full)) mustBe (x, y)
    }
  }
  it must "work for pro-rook with random occupancy" in {
    val expected = BitBoard.seq(
      """
        |--**-**** -------** ------*** --------- --------- --------- ---------
        |---***--- --******- --*****-* --------- --------- --------- ---------
        |----*---- -------** ------*** --------- --------- --------- ---------
        |----*---- --------* -------*- --------- ---***--- --------- ---------
        |--------- --------* --------- --------- --**-**** --------- --*------
        |--------- --------* --------- --------- ---***--- *-------- -***-----
        |--------- --------* --------- --------- ----*---- *-------- **-******
        |--------- --------* --------- -------** ----*---- **------- -***-----
        |--------- --------- --------- --******- --------- -**------ ---------
      """.stripMargin)
    val occ = BitBoard(
      """
        |--*-*----
        |--*------
        |--*------
        |-*--*--*-
        |*-*------
        |*--------
        |--*------
        |--***---*
        |--*------
      """.stripMargin)
    Seq(P51, P12, P22, P19, P55, P99, P77) zip expected foreach {
      case (x, y) => (x, TestRangedAttack.getRangedAttack(BPR, x, occ)) mustBe (x, y)
    }
    Seq(P51, P12, P22, P19, P55, P99, P77) zip expected foreach {
      case (x, y) => (x, TestRangedAttack.getRangedAttack(WPR, x, occ)) mustBe (x, y)
    }
  }  

}
